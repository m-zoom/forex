FOREX CHART PATTERN RECOGNITION SYSTEM - COMPLETE CODEBASE ANALYSIS
==========================================================================

This comprehensive analysis covers every file, function, class, and component in the forex pattern recognition system codebase.

==========================================================================
PROJECT OVERVIEW
==========================================================================

The Forex Chart Pattern Recognition System is an AI-powered desktop application built with Python and Tkinter that automatically detects and analyzes forex chart patterns in real-time. The system integrates with the Financial Datasets API to fetch live financial data and uses machine learning models to identify common chart patterns.

Architecture: Modular design with separate layers for data processing, pattern detection, GUI components, and utilities.
Primary Language: Python 3.11+
GUI Framework: Tkinter with matplotlib integration
Data Source: Financial Datasets API
Pattern Detection: Rule-based algorithms with ML enhancement

==========================================================================
MAIN ENTRY POINTS
==========================================================================

1. main.py - Primary application entry point
   Functions:
   - check_dependencies(): Validates required Python packages (pandas, numpy, matplotlib, mplfinance, requests, scipy, sklearn)
   - main(): Initializes logger, config, creates Tkinter root window (1400x900), centers window, initializes MainWindow class, sets up close handler

2. run_desktop.py - Desktop launcher script
   Functions:
   - check_display(): Checks if GUI display is available (Windows or DISPLAY env var on Linux/Mac)
   - main(): Entry point for desktop application, imports and runs main()

3. desktop_app.py - Lightweight testing application
   Functions:
   - setup_simple_logger(name): Creates basic logging without external dependencies
   - test_imports(): Tests all required imports and initializes core components
   - create_simple_gui(): Creates test GUI window with functionality test button
   - main(): Tests core functionality and attempts GUI creation

4. test_api.py - API validation testing
   Functions:
   - test_api_validation(): Tests API key validation and data fetching capabilities

5. test_core.py - Core functionality testing
   Functions:
   - test_core_functionality(): Tests all core components without GUI

==========================================================================
DATA LAYER (data/)
==========================================================================

data/__init__.py
- Package initialization
- Exports: ForexAPI, DataProcessor

data/forex_api.py - Financial data API integration
Classes:
- Price(BaseModel): Pydantic model for price data (time, open, close, high, low, volume)
- PriceResponse(BaseModel): Container for price list
- FinancialDataAPI: Main API client class

FinancialDataAPI Methods:
- __init__(config, logger): Initializes with API key, base URL, timeouts, rate limiting
- _make_request(params): Makes HTTP requests with rate limiting and retry logic
- get_data_chunk(ticker, start_date, end_date, interval): Fetches data for specific date range
- get_forex_data(symbol, interval, outputsize): Main data fetching with chunking support
- get_real_time_quote(symbol): Gets latest price data for symbol
- get_supported_symbols(): Returns list of supported stock symbols
- validate_api_key(): Tests API connection with 5-day data request

Supported intervals: 1min, 5min, 15min, 30min, 60min, 1h, 4h, 1d, daily, weekly, monthly
Supported symbols: 32 major stocks and ETFs (AAPL, MSFT, GOOGL, etc.)

data/data_processor.py - Data processing and technical analysis
Class:
- DataProcessor: Processes raw OHLCV data and adds technical indicators

DataProcessor Methods:
- __init__(logger): Initializes with MinMaxScaler
- process_data(df): Main processing pipeline - cleans data, adds indicators, finds peaks/valleys
- add_technical_indicators(df): Adds SMA, EMA, Bollinger Bands, RSI, MACD, Stochastic, ATR
- calculate_rsi(prices, period=14): Relative Strength Index calculation
- calculate_macd(df, fast=12, slow=26, signal=9): MACD indicator
- calculate_stochastic(df, k_period=14, d_period=3): Stochastic Oscillator
- calculate_atr(df, period=14): Average True Range volatility measure
- find_peaks_valleys(df, window=5): Identifies local maxima/minima using scipy
- add_price_changes(df): Price change percentages and volatility measures
- normalize_data(df, columns): MinMax normalization for ML features
- create_sequences(df, sequence_length=60, target_column): Time series sequences for ML
- calculate_support_resistance_levels(df, window=20, num_levels=3): S/R level clustering
- validate_data_quality(df): Checks for missing values, duplicates, extreme movements

==========================================================================
MODELS LAYER (models/)
==========================================================================

models/pattern_detector.py - Core pattern detection algorithms
Class:
- PatternDetector: Main pattern recognition engine

PatternDetector Methods:
- __init__(logger): Initializes with default configuration
- configure(pattern_config): Updates detection parameters
- detect_all_patterns(df): Main detection pipeline for all enabled patterns
- detect_head_shoulders(df, tolerance, min_duration, max_duration): H&S pattern detection
- detect_double_tops_bottoms(df, tolerance, min_distance): Double top/bottom patterns
- detect_triangles(df, tolerance, min_points): Triangle pattern detection
- detect_support_resistance(df, tolerance, min_strength): S/R level detection
- calculate_pattern_confidence(pattern, df): Confidence scoring algorithm
- load_pretrained_models(): Loads saved ML models if available

Pattern Types Detected:
- Head and Shoulders (bearish reversal)
- Inverse Head and Shoulders (bullish reversal)
- Double Top (bearish reversal)
- Double Bottom (bullish reversal)
- Ascending Triangle (bullish continuation)
- Descending Triangle (bearish continuation)
- Symmetrical Triangle (breakout pattern)
- Support Levels (price floors)
- Resistance Levels (price ceilings)

models/ml_models.py - Machine learning pattern recognition
Class:
- PatternRecognitionModels: ML models for enhanced pattern detection

ML Model Methods:
- __init__(logger): Initializes model registry and scalers
- create_cnn_model(input_shape): 1D CNN for pattern recognition
- create_lstm_model(input_shape): LSTM for time series patterns
- create_hybrid_model(input_shape): Combined CNN-LSTM architecture
- prepare_training_data(df, pattern_type): Feature extraction and normalization
- create_sequences_for_pattern(scaled_features, df, pattern_type): Sequence generation
- has_head_shoulders_pattern(data_segment): Training label generation
- has_double_top_pattern(data_segment): Training label generation
- has_triangle_pattern(data_segment): Training label generation
- train_pattern_model(df, pattern_type, model_type): Model training pipeline
- evaluate_model(model, X_test, y_test): Model performance evaluation
- save_model(model, pattern_type, model_type): Model persistence
- load_model(pattern_type, model_type): Model loading
- predict_pattern(model, data_sequence): Pattern prediction

models/advanced_realtime_monitor.py - Real-time monitoring system
Classes:
- MonitoringConfig: Configuration dataclass for monitoring parameters
- MarketSnapshot: Complete market state representation
- AdaptiveDataBuffer: Sliding buffer for efficient data management
- VolatilityAdaptiveScheduler: Dynamic fetch interval adjustment
- PatternFeedbackEngine: ML-driven sensitivity adjustment
- AdvancedRealtimeMonitor: Main monitoring system

AdvancedRealtimeMonitor Methods:
- __init__(main_window, config): Initializes monitoring components
- start_monitoring(): Begins multi-symbol monitoring
- stop_monitoring(): Gracefully stops all monitoring
- _monitoring_loop(): Main monitoring thread
- _fetch_symbol_data(symbol, timeframe): Individual symbol data fetching
- _process_new_data(symbol, timeframe, data): Data processing pipeline
- _detect_patterns_realtime(symbol, data): Real-time pattern detection
- _update_gui_thread_safe(updates): Thread-safe GUI updates
- _calculate_fetch_priority(symbol): Priority-based scheduling
- _handle_monitoring_error(error, context): Error recovery

models/pretrained_weights.py - Pre-trained model definitions
- Model architecture definitions
- Pre-configured weights for common patterns
- Transfer learning support

==========================================================================
GUI LAYER (gui/)
==========================================================================

gui/main_window.py - Central application window
Class:
- MainWindow: Main GUI controller and coordinator

MainWindow Methods:
- __init__(root, config, logger): Initializes all GUI components and systems
- setup_ui(): Creates main UI layout with frames and status bar
- create_frames(): Arranges controls, chart, and pattern frames
- setup_menu(): Creates comprehensive menu system with File, Data, View, Tools, Help
- update_status(message, show_progress): Updates status bar with timestamps
- show/hide_progress_bar(): Progress indication during operations
- check_api_connection(): Validates API in background thread
- fetch_data(symbol, timeframe, outputsize): Main data fetching pipeline
- detect_patterns(): Pattern detection with GUI updates
- start_real_time(symbol, interval): Real-time monitoring initialization
- stop_real_time(): Stops real-time monitoring
- _real_time_worker(symbol, interval): Background real-time data fetching
- create_pattern_alerts(patterns): Creates intelligent alerts for detected patterns
- show_pattern_notification(count): User notifications for high-confidence patterns

Menu System:
- File: Load CSV, Save JSON/CSV, Export Chart, Exit
- Data: Refresh, Clear, API Validation
- View: Refresh Chart, Clear Patterns, Progress Bar
- Tools: Pattern Settings, Alert Preferences, Monitoring Setup, Analytics, Training, System Info
- Help: User Guide, Pattern Guide, About

State Management:
- current_data: Active dataset
- detected_patterns: Current pattern list
- is_real_time: Monitoring status
- current_symbol: Active trading symbol

gui/chart_frame.py - Chart visualization component
Class:
- ChartFrame: Interactive chart display with matplotlib integration

ChartFrame Methods:
- __init__(parent, main_window): Initializes chart with threading safety
- setup_ui(): Creates chart options and controls
- create_empty_chart(): Initial placeholder chart
- update_chart(data): Main chart update pipeline
- create_candlestick_chart(data): OHLC candlestick visualization
- create_line_chart(data): Simple line chart
- create_ohlc_chart(data): OHLC bar chart
- add_pattern_overlays(patterns): Pattern visualization on chart
- draw_pattern_overlay(pattern): Individual pattern rendering
- draw_head_shoulders(pattern): H&S pattern visualization
- draw_double_pattern(pattern): Double top/bottom visualization
- draw_triangle(pattern): Triangle pattern lines
- draw_support_resistance(pattern): Horizontal S/R lines
- clear_pattern_overlays(): Removes all pattern overlays
- export_chart(filename): Chart image export

Chart Options:
- Chart types: Candlestick, Line, OHLC
- Technical indicators: Moving averages, Bollinger Bands
- Volume display toggle
- Pattern overlays

gui/controls_frame.py - Control panel for data and patterns
Class:
- ControlsFrame: Left-side control panel with scrollable interface

ControlsFrame Methods:
- __init__(parent, main_window): Initializes scrollable control interface
- setup_ui(): Creates scrollable frame with sections
- create_data_section(parent): Data fetching controls and symbol selection
- create_pattern_section(parent): Pattern detection configuration
- create_realtime_section(parent): Real-time monitoring controls
- create_training_section(parent): ML model training interface
- create_info_section(parent): Information display and quick actions
- fetch_data(): Data fetching with threading
- detect_patterns(): Pattern detection pipeline
- start_realtime(): Real-time monitoring activation
- stop_realtime(): Real-time monitoring deactivation
- retrain_model(): ML model retraining
- validate_model(): Model performance validation

Control Sections:
1. Data Fetching: Symbol selection, timeframe, data amount
2. Pattern Detection: Pattern types, sensitivity, auto-detect
3. Real-time Monitoring: Status, intervals, auto-patterns
4. Model Training: Training controls, progress, validation
5. Information: Quick stats and actions

gui/pattern_frame.py - Pattern results display
Class:
- PatternFrame: Pattern detection results with detailed analysis

PatternFrame Methods:
- __init__(parent, main_window): Initializes pattern display interface
- setup_ui(): Creates pattern list and details interface
- update_patterns(patterns): Updates pattern list with color coding
- on_pattern_select(event): Handles pattern selection events
- show_pattern_details(pattern): Displays detailed pattern information
- clear_patterns(): Clears all patterns and overlays
- refresh_patterns(): Re-runs pattern detection
- export_patterns(): Exports patterns to JSON/text files

Pattern Display Features:
- Treeview with columns: Type, Time, Confidence, Status
- Color coding: Green (high confidence), Orange (medium), Red (low)
- Detailed pattern analysis panel
- Export functionality
- Pattern-specific trading information

gui/alert_system.py - Intelligent alert system
Classes:
- PatternAlert: Individual alert representation
- AlertSystem: Alert management and notifications

AlertSystem Methods:
- __init__(main_window): Initializes alert system with settings
- create_pattern_alert(pattern_type, symbol, confidence, action, data): Alert creation
- should_trigger_alert(alert): Alert criteria evaluation
- trigger_alert(alert): Alert activation and notifications
- show_alert_popup(alert): Non-intrusive popup display
- view_pattern_details(alert, popup): Detailed pattern analysis window
- generate_pattern_analysis(alert): AI-generated pattern descriptions
- play_alert_sound(): Audio notification
- save/load_alert_history(): Alert persistence
- update_settings(new_settings): Settings management

Alert Features:
- Confidence-based filtering
- Pattern type selection
- Multiple notification methods (popup, sound, email)
- Auto-dismiss timers
- Detailed pattern analysis
- Trading recommendations

gui/preferences_dialog.py - User preferences interface
Class:
- PreferencesDialog: Comprehensive settings management

PreferencesDialog Methods:
- __init__(parent, alert_system): Initializes preferences interface
- show(): Displays tabbed preferences dialog
- setup_ui(): Creates tabbed interface
- create_alert_settings_tab(notebook): Alert configuration
- create_pattern_settings_tab(notebook): Pattern monitoring settings
- create_trading_settings_tab(notebook): Trading preferences
- apply_settings(): Saves all preference changes
- reset_defaults(): Resets to default settings
- save/load_additional_preferences(): Preference persistence

Preference Categories:
1. Alert Settings: Confidence threshold, notification methods, frequency
2. Pattern Settings: Pattern types, timeframes, multi-timeframe analysis
3. Trading Settings: Symbols, risk management, trading hours

gui/analytics_dashboard.py - Pattern performance analytics
Class:
- AnalyticsDashboard: Pattern history and performance analysis

Features:
- Pattern success rate tracking
- Confidence distribution analysis
- Symbol-specific performance
- Export and reporting capabilities
- Historical pattern trends

gui/chart_fixes.py - Matplotlib threading fixes
Functions:
- disable_mouse_events(canvas): Prevents threading issues with mouse events
- configure_matplotlib_threading(): Thread-safe matplotlib configuration
- create_thread_safe_canvas(fig, parent): Safe canvas creation

==========================================================================
UTILITIES LAYER (utils/)
==========================================================================

utils/config.py - Configuration management
Class:
- Config: Centralized configuration with defaults and environment override

Config Methods:
- __init__(config_file): Loads configuration from file and environment
- load_config(): Configuration loading pipeline
- get_default_config(): Default configuration values
- load_from_environment(): Environment variable override
- get/getint/getfloat/getboolean(): Type-safe value retrieval
- set(section, key, value): Configuration updates
- save_config(): Configuration persistence
- get_api_config(): API-specific configuration
- get_pattern_config(): Pattern detection configuration
- get_display_config(): Display configuration

Configuration Sections:
- API: API keys, timeouts, retry logic
- PATTERNS: Detection settings, sensitivity, confidence
- DISPLAY: Chart appearance, themes, indicators
- REALTIME: Monitoring intervals, alerts
- MODELS: ML training parameters
- LOGGING: Log levels, file rotation
- DATA: Default symbols, caching
- UI: Window dimensions, themes

utils/logger.py - Enhanced logging system
Classes:
- ColoredFormatter: Console output with colors
- ForexLogger: Enhanced logger with rotation and multiple handlers

Logging Features:
- File rotation with size limits
- Colored console output
- Multiple log levels
- Specialized logging methods for API, patterns, data processing
- Context-aware error logging

utils/helpers.py - Utility functions
Functions:
- save_results(data, filename, format_type): Save data in JSON, CSV, or pickle format
- load_results(filename): Load saved results
- backup_data(source_dir, backup_dir): Create timestamped backups
- restore_backup(backup_path, target_dir): Restore from backup
- validate_data_file(filepath): Validate CSV/parquet files
- format_number/percentage/currency(): Formatting utilities
- get_system_info(): System information gathering

==========================================================================
BUTTON AND CONTROL FUNCTIONS
==========================================================================

Data Controls:
1. "Fetch Data" Button (controls_frame.py:fetch_data)
   - Validates symbol and timeframe selection
   - Calls forex_api.get_forex_data() in background thread
   - Updates chart_frame with new data
   - Triggers auto-pattern detection if enabled

2. "Detect Patterns" Button (controls_frame.py:detect_patterns)
   - Runs pattern_detector.detect_all_patterns()
   - Updates pattern_frame with results
   - Adds pattern overlays to chart
   - Creates alerts for high-confidence patterns

3. "Start Real-time" Button (controls_frame.py:start_realtime)
   - Initializes background monitoring thread
   - Updates status indicator
   - Begins periodic data fetching

4. "Stop Real-time" Button (controls_frame.py:stop_realtime)
   - Stops monitoring thread
   - Updates status indicator
   - Clears real-time data updates

Pattern Controls:
5. "Clear Patterns" Button (pattern_frame.py:clear_patterns)
   - Clears pattern list display
   - Removes chart overlays
   - Resets pattern counter

6. "Export Patterns" Button (pattern_frame.py:export_patterns)
   - Opens file dialog for save location
   - Exports patterns to JSON or text format
   - Includes pattern details and trading information

Chart Controls:
7. "Refresh Chart" Button (chart_frame.py:refresh_chart)
   - Redraws current chart
   - Applies current display settings
   - Updates technical indicators

8. Chart Type Dropdown (chart_frame.py:on_chart_type_change)
   - Switches between candlestick, line, and OHLC charts
   - Preserves pattern overlays
   - Updates display immediately

9. Technical Indicator Checkboxes:
   - "Volume" (chart_frame.py:on_volume_toggle)
   - "Moving Averages" (chart_frame.py:on_ma_toggle)
   - "Bollinger Bands" (chart_frame.py:on_bb_toggle)

Model Training Controls:
10. "Retrain Model" Button (controls_frame.py:retrain_model)
    - Prepares training data from current dataset
    - Trains ML models for pattern recognition
    - Validates model performance
    - Saves trained models

11. "Validate Model" Button (controls_frame.py:validate_model)
    - Tests current model accuracy
    - Displays performance metrics
    - Suggests retraining if needed

Menu Functions:
12. File Menu:
    - "Load CSV Data" (main_window.py:load_data_file)
    - "Save Results as JSON/CSV" (main_window.py:save_results_json/csv)
    - "Export Chart" (main_window.py:export_chart)

13. Tools Menu:
    - "Pattern Detection Settings" (main_window.py:show_pattern_settings)
    - "Alert Preferences" (main_window.py:show_preferences)
    - "Analytics Dashboard" (main_window.py:show_analytics_dashboard)
    - "Advanced Monitoring Setup" (main_window.py:show_advanced_monitoring_setup)

==========================================================================
DATA FLOW AND ARCHITECTURE
==========================================================================

Application Startup Flow:
1. main.py:main() checks dependencies and initializes logger
2. Creates Tkinter root window and MainWindow instance
3. MainWindow.__init__() initializes all components:
   - ForexAPI for data fetching
   - DataProcessor for technical analysis
   - PatternDetector for pattern recognition
   - AlertSystem for notifications
   - GUI frames (controls, chart, pattern)
4. setup_menu() creates comprehensive menu system
5. check_api_connection() validates API access

Data Fetching Flow:
1. User selects symbol and timeframe in ControlsFrame
2. fetch_data() button triggers background thread
3. ForexAPI.get_forex_data() fetches data with chunking
4. DataProcessor.process_data() adds technical indicators
5. ChartFrame.update_chart() displays processed data
6. Auto-detection triggers pattern analysis if enabled

Pattern Detection Flow:
1. PatternDetector.detect_all_patterns() runs algorithms
2. Individual pattern methods (head_shoulders, double_tops, etc.)
3. Confidence scoring for each detected pattern
4. PatternFrame.update_patterns() displays results
5. ChartFrame.add_pattern_overlays() visualizes patterns
6. AlertSystem creates notifications for high-confidence patterns

Real-time Monitoring Flow:
1. AdvancedRealtimeMonitor starts background threads
2. Adaptive scheduling based on market volatility
3. Continuous data fetching and pattern detection
4. Thread-safe GUI updates
5. Alert generation for new patterns

==========================================================================
MACHINE LEARNING COMPONENTS
==========================================================================

Model Architectures:
1. CNN Model (1D Convolutional Neural Network)
   - Conv1D layers with ReLU activation
   - MaxPooling for feature extraction
   - Dense layers for classification
   - Dropout for regularization

2. LSTM Model (Long Short-Term Memory)
   - Multiple LSTM layers with return sequences
   - Dropout between layers
   - Dense output layer with sigmoid activation

3. Hybrid Model (CNN-LSTM combination)
   - CNN feature extraction
   - LSTM sequence modeling
   - Combined architecture for enhanced accuracy

Training Pipeline:
1. Feature extraction from OHLCV data
2. Technical indicator calculation
3. Data normalization using MinMaxScaler
4. Sequence generation for time series
5. Train/validation split
6. Model training with early stopping
7. Performance evaluation
8. Model persistence

==========================================================================
ERROR HANDLING AND SAFETY
==========================================================================

API Error Handling:
- Request timeouts and retry logic
- Rate limiting with exponential backoff
- Graceful degradation for API failures
- Cached data for offline operation

Threading Safety:
- Thread-safe GUI updates using root.after()
- Background data fetching to prevent UI blocking
- Proper thread cleanup on application close
- Exception handling in worker threads

Data Validation:
- Input validation for symbols and timeframes
- Data quality checks for completeness
- Type validation for numeric data
- Fallback handling for missing data

Pattern Detection Safety:
- Minimum data requirements for each pattern
- Confidence thresholds for reliability
- Multiple validation criteria for patterns
- Graceful handling of edge cases

==========================================================================
CONFIGURATION AND CUSTOMIZATION
==========================================================================

User Customizable Settings:
1. Pattern Detection:
   - Sensitivity thresholds (0.5% to 5.0%)
   - Pattern types to monitor
   - Minimum confidence levels
   - Auto-detection preferences

2. Alert System:
   - Confidence thresholds (50% to 95%)
   - Notification methods (popup, sound, email)
   - Alert frequency limits
   - Pattern-specific preferences

3. Display Options:
   - Chart types (candlestick, line, OHLC)
   - Technical indicators
   - Color schemes and themes
   - Window dimensions

4. Trading Preferences:
   - Preferred symbols for monitoring
   - Risk management settings
   - Trading session hours
   - Stop-loss and take-profit defaults

5. Real-time Monitoring:
   - Update intervals (adaptive or fixed)
   - Multi-symbol monitoring
   - Volatility-based scheduling
   - Performance optimization

==========================================================================
PERFORMANCE OPTIMIZATION
==========================================================================

Data Efficiency:
- Sliding buffer architecture for real-time data
- Intelligent caching with TTL
- Chunked API requests for large datasets
- Efficient pandas operations

Memory Management:
- Configurable buffer sizes
- Automatic cleanup of old data
- Memory-efficient pattern storage
- Garbage collection optimization

Threading Performance:
- Multi-threaded data fetching
- Background pattern detection
- Non-blocking GUI updates
- Worker thread pooling

Algorithm Optimization:
- Vectorized calculations using numpy
- Efficient peak/valley detection
- Optimized technical indicator calculations
- Fast pattern matching algorithms

==========================================================================
EXTENSIBILITY AND PLUGIN ARCHITECTURE
==========================================================================

Adding New Patterns:
1. Implement detection method in PatternDetector
2. Add pattern configuration options
3. Create visualization in ChartFrame
4. Add pattern-specific analysis
5. Update ML training data

Adding New Indicators:
1. Implement calculation in DataProcessor
2. Add to technical indicator pipeline
3. Include in ML feature set
4. Add chart display options

Adding New Data Sources:
1. Create API client following ForexAPI interface
2. Implement data transformation
3. Add configuration options
4. Update symbol lists

==========================================================================
TESTING AND VALIDATION
==========================================================================

Test Files:
- test_api.py: API connectivity and data fetching
- test_core.py: Core component initialization
- desktop_app.py: Lightweight functionality testing

Validation Methods:
- Data quality validation
- Pattern detection accuracy
- Model performance metrics
- API response validation
- Configuration validation

==========================================================================
DEPLOYMENT AND DISTRIBUTION
==========================================================================

Desktop Application:
- Standalone Python application
- Tkinter GUI for cross-platform support
- Local data storage and configuration
- No web server requirements

Dependencies:
- Core: pandas, numpy, matplotlib, mplfinance
- ML: tensorflow, scikit-learn, scipy
- API: requests, pydantic
- GUI: tkinter (included with Python)
- Utilities: pytz for timezone handling

Installation:
1. Install Python 3.11+
2. Install required packages via pip
3. Configure API keys
4. Run main.py or run_desktop.py

==========================================================================
CONCLUSION
==========================================================================

This forex pattern recognition system provides a comprehensive solution for automated chart pattern detection with:

- Real-time market monitoring
- Advanced pattern detection algorithms
- Machine learning enhancement
- Interactive chart visualization
- Intelligent alert system
- Comprehensive user customization
- Professional trading features

The modular architecture allows for easy extension and customization while maintaining high performance and reliability for professional trading applications.

Total Files Analyzed: 20+
Total Functions/Methods: 200+
Total Classes: 25+
Lines of Code: ~8000+

==========================================================================