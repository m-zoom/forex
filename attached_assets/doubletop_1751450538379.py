import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
import pickle
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class DoubleTopClassifier:
    def __init__(self, threshold=0.7):
        """
        Initialize the Double Top Pattern Classifier
        
        Args:
            threshold (float): Hard threshold for classification (default: 0.7)
        """
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.scaler = StandardScaler()
        self.threshold = threshold
        self.is_fitted = False
        
    def extract_features(self, ohlc_data):
        """
        Extract features that characterize double top patterns
        
        Args:
            ohlc_data (list): List of [Open, High, Low, Close, Volume] data points
            
        Returns:
            dict: Dictionary of extracted features
        """
        if len(ohlc_data) < 10:
            return None
            
        ohlc_array = np.array(ohlc_data)
        opens = ohlc_array[:, 0]
        highs = ohlc_array[:, 1]
        lows = ohlc_array[:, 2]
        closes = ohlc_array[:, 3]
        volumes = ohlc_array[:, 4]
        
        features = {}
        
        # 1. Find local maxima (potential tops)
        high_peaks, _ = find_peaks(highs, distance=3)
        
        # 2. Find local minima (potential support)
        low_valleys, _ = find_peaks(-lows, distance=2)
        
        # 3. Basic price statistics
        features['price_range'] = (np.max(highs) - np.min(lows)) / np.mean(closes)
        features['volatility'] = np.std(closes) / np.mean(closes)
        
        # 4. Double top specific features
        if len(high_peaks) >= 2:
            # Get the two highest points
            highest_indices = high_peaks[np.argsort(highs[high_peaks])[-2:]]
            highest_indices = np.sort(highest_indices)
            
            # Distance between tops
            features['top_distance'] = abs(highest_indices[1] - highest_indices[0])
            
            # Height similarity of tops
            top1_high = highs[highest_indices[0]]
            top2_high = highs[highest_indices[1]]
            features['top_similarity'] = 1 - abs(top1_high - top2_high) / np.mean([top1_high, top2_high])
            
            # Support level between tops
            if len(low_valleys) > 0:
                support_candidates = low_valleys[(low_valleys > highest_indices[0]) & (low_valleys < highest_indices[1])]
                if len(support_candidates) > 0:
                    support_level = np.min(lows[support_candidates])
                    features['support_strength'] = (np.max([top1_high, top2_high]) - support_level) / np.mean(closes)
                else:
                    features['support_strength'] = 0
            else:
                features['support_strength'] = 0
                
            # Volume analysis
            if highest_indices[1] < len(volumes) - 1:
                vol_at_top1 = volumes[highest_indices[0]]
                vol_at_top2 = volumes[highest_indices[1]]
                avg_volume = np.mean(volumes)
                features['volume_increase'] = max(vol_at_top1, vol_at_top2) / avg_volume
            else:
                features['volume_increase'] = 1
                
        else:
            features['top_distance'] = 0
            features['top_similarity'] = 0
            features['support_strength'] = 0
            features['volume_increase'] = 1
            
        # 5. Pattern shape features
        features['trend_reversal'] = self._calculate_trend_reversal(closes)
        features['m_shape_score'] = self._calculate_m_shape_score(highs)
        
        # 6. Breakdown characteristics
        features['breakdown_strength'] = self._calculate_breakdown_strength(closes, lows)
        
        # 7. Price momentum features
        features['early_momentum'] = (closes[len(closes)//3] - closes[0]) / closes[0]
        features['late_momentum'] = (closes[-1] - closes[len(closes)*2//3]) / closes[len(closes)*2//3]
        
        return features
    
    def _calculate_trend_reversal(self, closes):
        """Calculate trend reversal strength"""
        if len(closes) < 6:
            return 0
        
        third = len(closes) // 3
        early_trend = (closes[third] - closes[0]) / closes[0]
        late_trend = (closes[-1] - closes[-third]) / closes[-third]
        
        # Good double top should show rise then decline
        if early_trend > 0 and late_trend < 0:
            return abs(early_trend - late_trend)
        return 0
    
    def _calculate_m_shape_score(self, highs):
        """Calculate how well the pattern resembles an M shape"""
        if len(highs) < 10:
            return 0
            
        # Divide into 4 quarters and check for M pattern
        q1 = len(highs) // 4
        q2 = len(highs) // 2
        q3 = 3 * len(highs) // 4
        
        m_score = 0
        
        # First rise to top
        if np.mean(highs[:q1]) < np.mean(highs[q1:q2]):
            m_score += 1
            
        # Decline to support
        if np.mean(highs[q1:q2]) > np.mean(highs[q2:q3]):
            m_score += 1
            
        # Second rise to top
        if np.mean(highs[q2:q3]) < np.mean(highs[q3:]):
            m_score += 1
            
        return m_score / 3
    
    def _calculate_breakdown_strength(self, closes, lows):
        """Calculate breakdown strength in the final portion"""
        if len(closes) < 6:
            return 0
            
        final_third = len(closes) * 2 // 3
        min_early = np.min(lows[:final_third])
        final_low = np.min(lows[final_third:])
        
        if final_low < min_early:
            return (min_early - final_low) / min_early
        return 0
    
    def generate_negative_samples(self, n_samples=50):
        """Generate negative samples (non-double top patterns)"""
        negative_samples = []
        
        for i in range(n_samples):
            # Generate random patterns that are NOT double tops
            pattern_length = np.random.randint(15, 25)
            
            # Random walk pattern
            if i < n_samples // 3:
                prices = self._generate_random_walk(pattern_length)
            # Trending pattern
            elif i < 2 * n_samples // 3:
                prices = self._generate_trending_pattern(pattern_length)
            # Single top pattern
            else:
                prices = self._generate_single_top_pattern(pattern_length)
                
            negative_samples.append(prices)
            
        return negative_samples
    
    def _generate_random_walk(self, length):
        """Generate random walk price pattern"""
        start_price = np.random.uniform(50, 200)
        prices = [start_price]
        
        for _ in range(length - 1):
            change = np.random.normal(0, 0.02) * prices[-1]
            prices.append(max(prices[-1] + change, 1))
            
        return self._prices_to_ohlc(prices)
    
    def _generate_trending_pattern(self, length):
        """Generate trending price pattern"""
        start_price = np.random.uniform(50, 200)
        trend = np.random.uniform(-0.02, 0.02)
        
        prices = []
        for i in range(length):
            noise = np.random.normal(0, 0.01) * start_price
            price = start_price * (1 + trend * i) + noise
            prices.append(max(price, 1))
            
        return self._prices_to_ohlc(prices)
    
    def _generate_single_top_pattern(self, length):
        """Generate single top pattern (not double top)"""
        start_price = np.random.uniform(50, 200)
        top_price = start_price * 1.2
        
        # Rise to top
        rise_length = length // 2
        decline_length = length - rise_length
        
        prices = []
        
        # Rise phase
        for i in range(rise_length):
            progress = i / rise_length
            price = start_price + (top_price - start_price) * progress
            noise = np.random.normal(0, 0.01) * price
            prices.append(price + noise)
            
        # Decline phase
        for i in range(decline_length):
            progress = i / decline_length
            price = top_price - (top_price - start_price) * progress * 1.1
            noise = np.random.normal(0, 0.01) * price
            prices.append(price + noise)
            
        return self._prices_to_ohlc(prices)
    
    def _prices_to_ohlc(self, prices):
        """Convert price series to OHLC format"""
        ohlc = []
        for i, price in enumerate(prices):
            # Add some intraday variation
            high = price * np.random.uniform(1.00, 1.03)
            low = price * np.random.uniform(0.97, 1.00)
            open_price = prices[i-1] if i > 0 else price
            close = price
            volume = np.random.randint(1000, 5000)
            
            ohlc.append([open_price, high, low, close, volume])
            
        return ohlc
    
    def prepare_training_data(self):
        """Prepare training data from double top patterns and negative samples"""
        # Double top patterns data
        double_top_patterns = {
         "pattern_1": [
        [90, 92, 93, 89, 1000],   # Rise starts
        [92, 95, 96, 91, 1100],
        [95, 98, 99, 94, 1200],
        [98, 100, 101, 97, 1300], # Approaching first top
        [100, 102, 103, 99, 1400],
        [102, 103, 104, 101, 1500], # First top
        [103, 100, 101, 98, 1600],  # Pullback
        [100, 97, 98, 96, 1500],
        [97, 95, 96, 94, 1400],     # Pullback bottom
        [95, 98, 99, 94, 1300],
        [98, 100, 101, 97, 1400],   # Second rise
        [100, 102, 103, 99, 1500],  # Second top
        [102, 100, 101, 98, 1400],
        [100, 97, 98, 95, 1300],    # Breakdown begins
        [97, 94, 95, 92, 1200],
        [94, 91, 92, 90, 1100],
        [91, 89, 90, 88, 1000],
        [89, 87, 88, 86, 900],
        [87, 85, 86, 84, 800]
    ],

    "pattern_2": [
        [45, 47, 48, 44, 2000],
        [47, 49, 50, 46, 2100],
        [49, 51, 52, 48, 2200],
        [51, 53, 54, 50, 2300],
        [53, 55, 56, 52, 2400],
        [55, 56, 57, 54, 2500], # First top
        [56, 54, 55, 53, 2400],
        [54, 52, 53, 51, 2300],
        [52, 50, 51, 49, 2200], # Pullback bottom
        [50, 52, 53, 49, 2100],
        [52, 54, 55, 51, 2200],
        [54, 56, 57, 53, 2300], # Second top
        [56, 53, 54, 52, 2200],
        [53, 51, 52, 50, 2100],
        [51, 49, 50, 48, 2000],
        [49, 47, 48, 46, 1900],
        [47, 45, 46, 44, 1800],
        [45, 43, 44, 42, 1700]
    ],

    "pattern_3": [
        [120, 123, 124, 119, 800],
        [123, 125, 126, 122, 850],
        [125, 128, 129, 124, 900],
        [128, 130, 131, 127, 950],
        [130, 132, 133, 129, 1000], # First top
        [132, 129, 130, 128, 950],
        [129, 127, 128, 126, 900],
        [127, 125, 126, 124, 850],
        [125, 123, 124, 122, 800], # Pullback bottom
        [123, 125, 126, 122, 750],
        [125, 127, 128, 124, 800],
        [127, 129, 130, 126, 850],
        [129, 131, 132, 128, 900], # Second top
        [131, 128, 129, 127, 850],
        [128, 126, 127, 125, 800],
        [126, 124, 125, 123, 750],
        [124, 122, 123, 121, 700],
        [122, 120, 121, 119, 650],
        [120, 118, 119, 117, 600]
    ],

    "pattern_4": [
        [75, 77, 78, 74, 1500],
        [77, 79, 80, 76, 1600],
        [79, 81, 82, 78, 1700],
        [81, 83, 84, 80, 1800],
        [83, 85, 86, 82, 1900],
        [85, 87, 88, 84, 2000], # First top
        [87, 84, 85, 83, 1900],
        [84, 82, 83, 81, 1800],
        [82, 80, 81, 79, 1700], # Pullback bottom
        [80, 82, 83, 79, 1600],
        [82, 84, 85, 81, 1700],
        [84, 86, 87, 83, 1800], # Second top
        [86, 83, 84, 82, 1700],
        [83, 81, 82, 80, 1600],
        [81, 79, 80, 78, 1500],
        [79, 77, 78, 76, 1400],
        [77, 75, 76, 74, 1300],
        [75, 73, 74, 72, 1200]
    ],

    "pattern_5": [
        [200, 205, 207, 198, 500],
        [205, 210, 212, 203, 550],
        [210, 215, 217, 208, 600],
        [215, 220, 222, 213, 650],
        [220, 225, 227, 218, 700], # First top
        [225, 220, 222, 218, 650],
        [220, 215, 217, 213, 600],
        [215, 210, 212, 208, 550], # Pullback bottom
        [210, 215, 217, 208, 500],
        [215, 220, 222, 213, 550],
        [220, 224, 226, 218, 600], # Second top
        [224, 219, 221, 217, 550],
        [219, 214, 216, 212, 500],
        [214, 209, 211, 207, 450],
        [209, 204, 206, 202, 400],
        [204, 199, 201, 197, 350],
        [199, 194, 196, 192, 300]
    ],

    "pattern_6": [
        [35, 37, 38, 34, 3000],
        [37, 39, 40, 36, 3200],
        [39, 41, 42, 38, 3400],
        [41, 43, 44, 40, 3600],
        [43, 45, 46, 42, 3800], # First top
        [45, 42, 43, 41, 3600],
        [42, 40, 41, 39, 3400],
        [40, 38, 39, 37, 3200], # Pullback bottom
        [38, 40, 41, 37, 3000],
        [40, 42, 43, 39, 3200],
        [42, 44, 45, 41, 3400], # Second top
        [44, 41, 42, 40, 3200],
        [41, 39, 40, 38, 3000],
        [39, 37, 38, 36, 2800],
        [37, 35, 36, 34, 2600],
        [35, 33, 34, 32, 2400],
        [33, 31, 32, 30, 2200]
    ],

    "pattern_7": [
        [150, 153, 155, 148, 1200],
        [153, 156, 158, 151, 1300],
        [156, 159, 161, 154, 1400],
        [159, 162, 164, 157, 1500],
        [162, 165, 167, 160, 1600], # First top
        [165, 162, 164, 160, 1500],
        [162, 159, 161, 157, 1400],
        [159, 156, 158, 154, 1300],
        [156, 153, 155, 151, 1200], # Pullback bottom
        [153, 156, 158, 151, 1100],
        [156, 159, 161, 154, 1200],
        [159, 162, 164, 157, 1300],
        [162, 164, 166, 159, 1400], # Second top
        [164, 161, 163, 159, 1300],
        [161, 158, 160, 156, 1200],
        [158, 155, 157, 153, 1100],
        [155, 152, 154, 150, 1000],
        [152, 149, 151, 147, 900],
        [149, 146, 148, 144, 800]
    ],

    "pattern_8": [
        [60, 62, 63, 59, 2500],
        [62, 64, 65, 61, 2600],
        [64, 66, 67, 63, 2700],
        [66, 68, 69, 65, 2800],
        [68, 70, 71, 67, 2900], # First top
        [70, 67, 68, 66, 2800],
        [67, 65, 66, 64, 2700],
        [65, 63, 64, 62, 2600], # Pullback bottom
        [63, 65, 66, 62, 2500],
        [65, 67, 68, 64, 2600],
        [67, 69, 70, 66, 2700], # Second top
        [69, 66, 67, 65, 2600],
        [66, 64, 65, 63, 2500],
        [64, 62, 63, 61, 2400],
        [62, 60, 61, 59, 2300],
        [60, 58, 59, 57, 2200],
        [58, 56, 57, 55, 2100]
    ],

    "pattern_9": [
        [110, 113, 115, 108, 900],
        [113, 116, 118, 111, 950],
        [116, 119, 121, 114, 1000],
        [119, 122, 124, 117, 1050],
        [122, 125, 127, 120, 1100], # First top
        [125, 122, 124, 120, 1050],
        [122, 119, 121, 117, 1000],
        [119, 116, 118, 114, 950],
        [116, 113, 115, 111, 900], # Pullback bottom
        [113, 116, 118, 111, 850],
        [116, 119, 121, 114, 900],
        [119, 122, 124, 117, 950],
        [122, 124, 126, 119, 1000], # Second top
        [124, 121, 123, 119, 950],
        [121, 118, 120, 116, 900],
        [118, 115, 117, 113, 850],
        [115, 112, 114, 110, 800],
        [112, 109, 111, 107, 750],
        [109, 106, 108, 104, 700]
    ],

    "pattern_10": [
        [25, 27, 28, 24, 4000],
        [27, 29, 30, 26, 4200],
        [29, 31, 32, 28, 4400],
        [31, 33, 34, 30, 4600],
        [33, 35, 36, 32, 4800], # First top
        [35, 32, 33, 31, 4600],
        [32, 30, 31, 29, 4400],
        [30, 28, 29, 27, 4200], # Pullback bottom
        [28, 30, 31, 27, 4000],
        [30, 32, 33, 29, 4200],
        [32, 34, 35, 31, 4400], # Second top
        [34, 31, 32, 30, 4200],
        [31, 29, 30, 28, 4000],
        [29, 27, 28, 26, 3800],
        [27, 25, 26, 24, 3600],
        [25, 23, 24, 22, 3400],
        [23, 21, 22, 20, 3200]
    ],

    "pattern_11": [
        [180, 184, 186, 178, 600],
        [184, 188, 190, 182, 650],
        [188, 192, 194, 186, 700],
        [192, 196, 198, 190, 750],
        [196, 200, 202, 194, 800], # First top
        [200, 196, 198, 194, 750],
        [196, 192, 194, 190, 700],
        [192, 188, 190, 186, 650], # Pullback bottom
        [188, 192, 194, 186, 600],
        [192, 196, 198, 190, 650],
        [196, 199, 201, 193, 700], # Second top
        [199, 195, 197, 193, 650],
        [195, 191, 193, 189, 600],
        [191, 187, 189, 185, 550],
        [187, 183, 185, 181, 500],
        [183, 179, 181, 177, 450],
        [179, 175, 177, 173, 400]
    ],

    "pattern_12": [
        [80, 83, 85, 78, 1800],
        [83, 86, 88, 81, 1900],
        [86, 89, 91, 84, 2000],
        [89, 92, 94, 87, 2100],
        [92, 95, 97, 90, 2200], # First top
        [95, 92, 94, 90, 2100],
        [92, 89, 91, 87, 2000],
        [89, 86, 88, 84, 1900], # Pullback bottom
        [86, 89, 91, 84, 1800],
        [89, 92, 94, 87, 1900],
        [92, 94, 96, 89, 2000], # Second top
        [94, 91, 93, 89, 1900],
        [91, 88, 90, 86, 1800],
        [88, 85, 87, 83, 1700],
        [85, 82, 84, 80, 1600],
        [82, 79, 81, 77, 1500],
        [79, 76, 78, 74, 1400]
    ],

    "pattern_13": [
        [50, 52, 54, 48, 2800],
        [52, 55, 57, 50, 3000],
        [55, 58, 60, 53, 3200],
        [58, 61, 63, 56, 3400],
        [61, 64, 66, 59, 3600], # First top
        [64, 61, 63, 59, 3400],
        [61, 58, 60, 56, 3200],
        [58, 55, 57, 53, 3000], # Pullback bottom
        [55, 58, 60, 53, 2800],
        [58, 61, 63, 56, 3000],
        [61, 63, 65, 58, 3200], # Second top
        [63, 60, 62, 58, 3000],
        [60, 57, 59, 55, 2800],
        [57, 54, 56, 52, 2600],
        [54, 51, 53, 49, 2400],
        [51, 48, 50, 46, 2200],
        [48, 45, 47, 43, 2000]
    ],

    "pattern_14": [
        [95, 98, 100, 93, 1300],
        [98, 101, 103, 96, 1400],
        [101, 104, 106, 99, 1500],
        [104, 107, 109, 102, 1600],
        [107, 110, 112, 105, 1700], # First top
        [110, 107, 109, 105, 1600],
        [107, 104, 106, 102, 1500],
        [104, 101, 103, 99, 1400], # Pullback bottom
        [101, 104, 106, 99, 1300],
        [104, 107, 109, 102, 1400],
        [107, 109, 111, 104, 1500], # Second top
        [109, 106, 108, 104, 1400],
        [106, 103, 105, 101, 1300],
        [103, 100, 102, 98, 1200],
        [100, 97, 99, 95, 1100],
        [97, 94, 96, 92, 1000],
        [94, 91, 93, 89, 900]
    ],

    "pattern_15": [
        [140, 143, 145, 138, 1000],
        [143, 146, 148, 141, 1100],
        [146, 149, 151, 144, 1200],
        [149, 152, 154, 147, 1300],
        [152, 155, 157, 150, 1400], # First top
        [155, 152, 154, 150, 1300],
        [152, 149, 151, 147, 1200],
        [149, 146, 148, 144, 1100], # Pullback bottom
        [146, 149, 151, 144, 1000],
        [149, 152, 154, 147, 1100],
        [152, 154, 156, 149, 1200], # Second top
        [154, 151, 153, 149, 1100],
        [151, 148, 150, 146, 1000],
        [148, 145, 147, 143, 900],
        [145, 142, 144, 140, 800],
        [142, 139, 141, 137, 700],
        [139, 136, 138, 134, 600]
    ],

    "pattern_16": [
        [70, 72, 74, 68, 2200],
        [72, 75, 77, 70, 2400],
        [75, 78, 80, 73, 2600],
        [78, 81, 83, 76, 2800],
        [81, 84, 86, 79, 3000], # First top
        [84, 81, 83, 79, 2800],
        [81, 78, 80, 76, 2600],
        [78, 75, 77, 73, 2400], # Pullback bottom
        [75, 78, 80, 73, 2200],
        [78, 81, 83, 76, 2400],
        [81, 83, 85, 78, 2600], # Second top
        [83, 80, 82, 78, 2400],
        [80, 77, 79, 75, 2200],
        [77, 74, 76, 72, 2000],
        [74, 71, 73, 69, 1800],
        [71, 68, 70, 66, 1600],
        [68, 65, 67, 63, 1400]
    ],

    "pattern_17": [
        [300, 305, 308, 297, 400],
        [305, 310, 313, 302, 450],
        [310, 315, 318, 307, 500],
        [315, 320, 323, 312, 550],
        [320, 325, 328, 317, 600], # First top
        [325, 320, 323, 317, 550],
        [320, 315, 318, 312, 500],
        [315, 310, 313, 307, 450], # Pullback bottom
        [310, 315, 318, 307, 400],
        [315, 320, 323, 312, 450],
        [320, 324, 327, 317, 500], # Second top
        [324, 319, 322, 316, 450],
        [319, 314, 317, 311, 400],
        [314, 309, 312, 306, 350],
        [309, 304, 307, 301, 300],
        [304, 299, 302, 296, 250],
        [299, 294, 297, 291, 200]
    ],

    "pattern_18": [
        [15, 17, 18, 14, 5000],
        [17, 19, 20, 16, 5200],
        [19, 21, 22, 18, 5400],
        [21, 23, 24, 20, 5600],
        [23, 25, 26, 22, 5800], # First top
        [25, 22, 23, 21, 5600],
        [22, 20, 21, 19, 5400],
        [20, 18, 19, 17, 5200], # Pullback bottom
        [18, 20, 21, 17, 5000],
        [20, 22, 23, 19, 5200],
        [22, 24, 25, 21, 5400], # Second top
        [24, 21, 22, 20, 5200],
        [21, 19, 20, 18, 5000],
        [19, 17, 18, 16, 4800],
        [17, 15, 16, 14, 4600],
        [15, 13, 14, 12, 4400],
        [13, 11, 12, 10, 4200]
    ],

    "pattern_19": [
        [220, 224, 227, 217, 700],
        [224, 228, 231, 221, 750],
        [228, 232, 235, 225, 800],
        [232, 236, 239, 229, 850],
        [236, 240, 243, 233, 900], # First top
        [240, 236, 239, 233, 850],
        [236, 232, 235, 229, 800],
        [232, 228, 231, 225, 750], # Pullback bottom
        [228, 232, 235, 225, 700],
        [232, 236, 239, 229, 750],
        [236, 239, 242, 233, 800], # Second top
        [239, 235, 238, 232, 750],
        [235, 231, 234, 228, 700],
        [231, 227, 230, 224, 650],
        [227, 223, 226, 220, 600],
        [223, 219, 222, 216, 550],
        [219, 215, 218, 212, 500]
    ],

    "pattern_20": [
        [85, 88, 90, 83, 1600],
        [88, 91, 93, 86, 1700],
        [91, 94, 96, 89, 1800],
        [94, 97, 99, 92, 1900],
        [97, 100, 102, 95, 2000], # First top
        [100, 97, 99, 95, 1900],
        [97, 94, 96, 92, 1800],
        [94, 91, 93, 89, 1700], # Pullback bottom
        [91, 94, 96, 89, 1600],
        [94, 97, 99, 92, 1700],
        [97, 99, 101, 94, 1800], # Second top
        [99, 96, 98, 94, 1700],
        [96, 93, 95, 91, 1600],
        [93, 90, 92, 88, 1500],
        [90, 87, 89, 85, 1400],
        [87, 84, 86, 82, 1300],
        [84, 81, 83, 79, 1200]
    ],

    "pattern_21": [
        [125, 128, 130, 123, 1100],
        [128, 131, 133, 126, 1200],
        [131, 134, 136, 129, 1300],
        [134, 137, 139, 132, 1400],
        [137, 140, 142, 135, 1500], # First top
        [140, 137, 139, 135, 1400],
        [137, 134, 136, 132, 1300],
        [134, 131, 133, 129, 1200], # Pullback bottom
        [131, 134, 136, 129, 1100],
        [134, 137, 139, 132, 1200],
        [137, 139, 141, 134, 1300], # Second top
        [139, 136, 138, 134, 1200],
        [136, 133, 135, 131, 1100],
        [133, 130, 132, 128, 1000],
        [130, 127, 129, 125, 900],
        [127, 124, 126, 122, 800],
        [124, 121, 123, 119, 700]
    ],

    "pattern_22": [
        [40, 42, 44, 38, 3500],
        [42, 45, 47, 40, 3700],
        [45, 48, 50, 43, 3900],
        [48, 51, 53, 46, 4100],
        [51, 54, 56, 49, 4300], # First top
        [54, 51, 53, 49, 4100],
        [51, 48, 50, 46, 3900],
        [48, 45, 47, 43, 3700], # Pullback bottom
        [45, 48, 50, 43, 3500],
        [48, 51, 53, 46, 3700],
        [51, 53, 55, 48, 3900], # Second top
        [53, 50, 52, 48, 3700],
        [50, 47, 49, 45, 3500],
        [47, 44, 46, 42, 3300],
        [44, 41, 43, 39, 3100],
        [41, 38, 40, 36, 2900],
        [38, 35, 37, 33, 2700]
    ],

    "pattern_23": [
        [165, 169, 172, 162, 850],
        [169, 173, 176, 166, 900],
        [173, 177, 180, 170, 950],
        [177, 181, 184, 174, 1000],
        [181, 185, 188, 178, 1050], # First top
        [185, 181, 184, 178, 1000],
        [181, 177, 180, 174, 950],
        [177, 173, 176, 170, 900], # Pullback bottom
        [173, 177, 180, 170, 850],
        [177, 181, 184, 174, 900],
        [181, 184, 187, 178, 950], # Second top
        [184, 180, 183, 177, 900],
        [180, 176, 179, 173, 850],
        [176, 172, 175, 169, 800],
        [172, 168, 171, 165, 750],
        [168, 164, 167, 161, 700],
        [164, 160, 163, 157, 650]
    ],

    "pattern_24": [
        [55, 57, 59, 53, 2700],
        [57, 60, 62, 55, 2900],
        [60, 63, 65, 58, 3100],
        [63, 66, 68, 61, 3300],
        [66, 69, 71, 64, 3500], # First top
        [69, 66, 68, 64, 3300],
        [66, 63, 65, 61, 3100],
        [63, 60, 62, 58, 2900], # Pullback bottom
        [60, 63, 65, 58, 2700],
        [63, 66, 68, 61, 2900],
        [66, 68, 70, 63, 3100], # Second top
        [68, 65, 67, 63, 2900],
        [65, 62, 64, 60, 2700],
        [62, 59, 61, 57, 2500],
        [59, 56, 58, 54, 2300],
        [56, 53, 55, 51, 2100],
        [53, 50, 52, 48, 1900]
    ],

    "pattern_25": [
        [190, 194, 197, 187, 650],
        [194, 198, 201, 191, 700],
        [198, 202, 205, 195, 750],
        [202, 206, 209, 199, 800],
        [206, 210, 213, 203, 850], # First top
        [210, 206, 209, 203, 800],
        [206, 202, 205, 199, 750],
        [202, 198, 201, 195, 700], # Pullback bottom
        [198, 202, 205, 195, 650],
        [202, 206, 209, 199, 700],
        [206, 209, 212, 203, 750], # Second top
        [209, 205, 208, 202, 700],
        [205, 201, 204, 198, 650],
        [201, 197, 200, 194, 600],
        [197, 193, 196, 190, 550],
        [193, 189, 192, 186, 500],
        [189, 185, 188, 182, 450]
    ],

    "pattern_26": [
        [100, 103, 105, 98, 1450],
        [103, 106, 108, 101, 1550],
        [106, 109, 111, 104, 1650],
        [109, 112, 114, 107, 1750],
        [112, 115, 117, 110, 1850], # First top
        [115, 112, 114, 110, 1750],
        [112, 109, 111, 107, 1650],
        [109, 106, 108, 104, 1550], # Pullback bottom
        [106, 109, 111, 104, 1450],
        [109, 112, 114, 107, 1550],
        [112, 114, 116, 109, 1650], # Second top
        [114, 111, 113, 109, 1550],
        [111, 108, 110, 106, 1450],
        [108, 105, 107, 103, 1350],
        [105, 102, 104, 100, 1250],
        [102, 99, 101, 97, 1150],
        [99, 96, 98, 94, 1050]
    ],

    "pattern_27": [
        [20, 22, 23, 19, 4500],
        [22, 24, 25, 21, 4700],
        [24, 26, 27, 23, 4900],
        [26, 28, 29, 25, 5100],
        [28, 30, 31, 27, 5300], # First top
        [30, 27, 28, 26, 5100],
        [27, 25, 26, 24, 4900],
        [25, 23, 24, 22, 4700], # Pullback bottom
        [23, 25, 26, 22, 4500],
        [25, 27, 28, 24, 4700],
        [27, 29, 30, 26, 4900], # Second top
        [29, 26, 27, 25, 4700],
        [26, 24, 25, 23, 4500],
        [24, 22, 23, 21, 4300],
        [22, 20, 21, 19, 4100],
        [20, 18, 19, 17, 3900],
        [18, 16, 17, 15, 3700]
    ],

    "pattern_28": [
        [250, 254, 257, 247, 550],
        [254, 258, 261, 251, 600],
        [258, 262, 265, 255, 650],
        [262, 266, 269, 259, 700],
        [266, 270, 273, 263, 750], # First top
        [270, 266, 269, 263, 700],
        [266, 262, 265, 259, 650],
        [262, 258, 261, 255, 600], # Pullback bottom
        [258, 262, 265, 255, 550],
        [262, 266, 269, 259, 600],
        [266, 269, 272, 263, 650], # Second top
        [269, 265, 268, 262, 600],
        [265, 261, 264, 258, 550],
        [261, 257, 260, 254, 500],
        [257, 253, 256, 250, 450],
        [253, 249, 252, 246, 400],
        [249, 245, 248, 242, 350]
    ],

    "pattern_29": [
        [30, 32, 34, 28, 4000],
        [32, 35, 37, 30, 4200],
        [35, 38, 40, 33, 4400],
        [38, 41, 43, 36, 4600],
        [41, 44, 46, 39, 4800], # First top
        [44, 41, 43, 39, 4600],
        [41, 38, 40, 36, 4400],
        [38, 35, 37, 33, 4200], # Pullback bottom
        [35, 38, 40, 33, 4000],
        [38, 41, 43, 36, 4200],
        [41, 43, 45, 38, 4400], # Second top
        [43, 40, 42, 38, 4200],
        [40, 37, 39, 35, 4000],
        [37, 34, 36, 32, 3800],
        [34, 31, 33, 29, 3600],
        [31, 28, 30, 26, 3400],
        [28, 25, 27, 23, 3200]
    ],

    "pattern_30": [
        [175, 179, 182, 172, 750],
        [179, 183, 186, 176, 800],
        [183, 187, 190, 180, 850],
        [187, 191, 194, 184, 900],
        [191, 195, 198, 188, 950], # First top
        [195, 191, 194, 188, 900],
        [191, 187, 190, 184, 850],
        [187, 183, 186, 180, 800], # Pullback bottom
        [183, 187, 190, 180, 750],
        [187, 191, 194, 184, 800],
        [191, 194, 197, 188, 850], # Second top
        [194, 190, 193, 187, 800],
        [190, 186, 189, 183, 750],
        [186, 182, 185, 179, 700],
        [182, 178, 181, 175, 650],
        [178, 174, 177, 171, 600],
        [174, 170, 173, 167, 550]
    ],

    "pattern_31": [
        [65, 67, 69, 63, 2400],
        [67, 70, 72, 65, 2600],
        [70, 73, 75, 68, 2800],
        [73, 76, 78, 71, 3000],
        [76, 79, 81, 74, 3200], # First top
        [79, 76, 78, 74, 3000],
        [76, 73, 75, 71, 2800],
        [73, 70, 72, 68, 2600], # Pullback bottom
        [70, 73, 75, 68, 2400],
        [73, 76, 78, 71, 2600],
        [76, 78, 80, 73, 2800], # Second top
        [78, 75, 77, 73, 2600],
        [75, 72, 74, 70, 2400],
        [72, 69, 71, 67, 2200],
        [69, 66, 68, 64, 2000],
        [66, 63, 65, 61, 1800],
        [63, 60, 62, 58, 1600]
    ],

    "pattern_32": [
        [210, 214, 217, 207, 500],
        [214, 218, 221, 211, 550],
        [218, 222, 225, 215, 600],
        [222, 226, 229, 219, 650],
        [226, 230, 233, 223, 700], # First top
        [230, 226, 229, 223, 650],
        [226, 222, 225, 219, 600],
        [222, 218, 221, 215, 550], # Pullback bottom
        [218, 222, 225, 215, 500],
        [222, 226, 229, 219, 550],
        [226, 229, 232, 223, 600], # Second top
        [229, 225, 228, 222, 550],
        [225, 221, 224, 218, 500],
        [221, 217, 220, 214, 450],
        [217, 213, 216, 210, 400],
        [213, 209, 212, 206, 350],
        [209, 205, 208, 202, 300]
    ],

    "pattern_33": [
        [120, 123, 125, 118, 1150],
        [123, 126, 128, 121, 1250],
        [126, 129, 131, 124, 1350],
        [129, 132, 134, 127, 1450],
        [132, 135, 137, 130, 1550], # First top
        [135, 132, 134, 130, 1450],
        [132, 129, 131, 127, 1350],
        [129, 126, 128, 124, 1250], # Pullback bottom
        [126, 129, 131, 124, 1150],
        [129, 132, 134, 127, 1250],
        [132, 134, 136, 129, 1350], # Second top
        [134, 131, 133, 129, 1250],
        [131, 128, 130, 126, 1150],
        [128, 125, 127, 123, 1050],
        [125, 122, 124, 120, 950],
        [122, 119, 121, 117, 850],
        [119, 116, 118, 114, 750]
    ],

    "pattern_34": [
        [45, 47, 49, 43, 3300],
        [47, 50, 52, 45, 3500],
        [50, 53, 55, 48, 3700],
        [53, 56, 58, 51, 3900],
        [56, 59, 61, 54, 4100], # First top
        [59, 56, 58, 54, 3900],
        [56, 53, 55, 51, 3700],
        [53, 50, 52, 48, 3500], # Pullback bottom
        [50, 53, 55, 48, 3300],
        [53, 56, 58, 51, 3500],
        [56, 58, 60, 53, 3700], # Second top
        [58, 55, 57, 53, 3500],
        [55, 52, 54, 50, 3300],
        [52, 49, 51, 47, 3100],
        [49, 46, 48, 44, 2900],
        [46, 43, 45, 41, 2700],
        [43, 40, 42, 38, 2500]
    ],

    "pattern_35": [
        [155, 159, 162, 152, 950],
        [159, 163, 166, 156, 1000],
        [163, 167, 170, 160, 1050],
        [167, 171, 174, 164, 1100],
        [171, 175, 178, 168, 1150], # First top
        [175, 171, 174, 168, 1100],
        [171, 167, 170, 164, 1050],
        [167, 163, 166, 160, 1000], # Pullback bottom
        [163, 167, 170, 160, 950],
        [167, 171, 174, 164, 1000],
        [171, 174, 177, 168, 1050], # Second top
        [174, 170, 173, 167, 1000],
        [170, 166, 169, 163, 950],
        [166, 162, 165, 159, 900],
        [162, 158, 161, 155, 850],
        [158, 154, 157, 151, 800],
        [154, 150, 153, 147, 750]
    ],

    "pattern_36": [
        [85, 88, 90, 83, 1750],
        [88, 91, 93, 86, 1850],
        [91, 94, 96, 89, 1950],
        [94, 97, 99, 92, 2050],
        [97, 100, 102, 95, 2150], # First top
        [100, 97, 99, 95, 2050],
        [97, 94, 96, 92, 1950],
        [94, 91, 93, 89, 1850], # Pullback bottom
        [91, 94, 96, 89, 1750],
        [94, 97, 99, 92, 1850],
        [97, 99, 101, 94, 1950], # Second top
        [99, 96, 98, 94, 1850],
        [96, 93, 95, 91, 1750],
        [93, 90, 92, 88, 1650],
        [90, 87, 89, 85, 1550],
        [87, 84, 86, 82, 1450],
        [84, 81, 83, 79, 1350]
    ],

    "pattern_37": [
        [240, 244, 247, 237, 450],
        [244, 248, 251, 241, 500],
        [248, 252, 255, 245, 550],
        [252, 256, 259, 249, 600],
        [256, 260, 263, 253, 650], # First top
        [260, 256, 259, 253, 600],
        [256, 252, 255, 249, 550],
        [252, 248, 251, 245, 500], # Pullback bottom
        [248, 252, 255, 245, 450],
        [252, 256, 259, 249, 500],
        [256, 259, 262, 253, 550], # Second top
        [259, 255, 258, 252, 500],
        [255, 251, 254, 248, 450],
        [251, 247, 250, 244, 400],
        [247, 243, 246, 240, 350],
        [243, 239, 242, 236, 300],
        [239, 235, 238, 232, 250]
    ],

    "pattern_38": [
        [75, 78, 80, 73, 2100],
        [78, 81, 83, 76, 2200],
        [81, 84, 86, 79, 2300],
        [84, 87, 89, 82, 2400],
        [87, 90, 92, 85, 2500], # First top
        [90, 87, 89, 85, 2400],
        [87, 84, 86, 82, 2300],
        [84, 81, 83, 79, 2200], # Pullback bottom
        [81, 84, 86, 79, 2100],
        [84, 87, 89, 82, 2200],
        [87, 89, 91, 84, 2300], # Second top
        [89, 86, 88, 84, 2200],
        [86, 83, 85, 81, 2100],
        [83, 80, 82, 78, 2000],
        [80, 77, 79, 75, 1900],
        [77, 74, 76, 72, 1800],
        [74, 71, 73, 69, 1700]
    ],

    "pattern_39": [
        [130, 134, 137, 127, 1050],
        [134, 138, 141, 131, 1150],
        [138, 142, 145, 135, 1250],
        [142, 146, 149, 139, 1350],
        [146, 150, 153, 143, 1450], # First top
        [150, 146, 149, 143, 1350],
        [146, 142, 145, 139, 1250],
        [142, 138, 141, 135, 1150], # Pullback bottom
        [138, 142, 145, 135, 1050],
        [142, 146, 149, 139, 1150],
        [146, 149, 152, 143, 1250], # Second top
        [149, 145, 148, 142, 1150],
        [145, 141, 144, 138, 1050],
        [141, 137, 140, 134, 950],
        [137, 133, 136, 130, 850],
        [133, 129, 132, 126, 750],
        [129, 125, 128, 122, 650]
    ],

    "pattern_40": [
        [95, 98, 100, 93, 1550],
        [98, 101, 103, 96, 1650],
        [101, 104, 106, 99, 1750],
        [104, 107, 109, 102, 1850],
        [107, 110, 112, 105, 1950], # First top
        [110, 107, 109, 105, 1850],
        [107, 104, 106, 102, 1750],
        [104, 101, 103, 99, 1650], # Pullback bottom
        [101, 104, 106, 99, 1550],
        [104, 107, 109, 102, 1650],
        [107, 109, 111, 104, 1750], # Second top
        [109, 106, 108, 104, 1650],
        [106, 103, 105, 101, 1550],
        [103, 100, 102, 98, 1450],
        [100, 97, 99, 95, 1350],
        [97, 94, 96, 92, 1250],
        [94, 91, 93, 89, 1150]
    ],

    "pattern_41": [
        [50, 53, 55, 48, 2950],
        [53, 56, 58, 51, 3100],
        [56, 59, 61, 54, 3250],
        [59, 62, 64, 57, 3400],
        [62, 65, 67, 60, 3550], # First top
        [65, 62, 64, 60, 3400],
        [62, 59, 61, 57, 3250],
        [59, 56, 58, 54, 3100], # Pullback bottom
        [56, 59, 61, 54, 2950],
        [59, 62, 64, 57, 3100],
        [62, 64, 66, 59, 3250], # Second top
        [64, 61, 63, 59, 3100],
        [61, 58, 60, 56, 2950],
        [58, 55, 57, 53, 2800],
        [55, 52, 54, 50, 2650],
        [52, 49, 51, 47, 2500],
        [49, 46, 48, 44, 2350]
    ],

    "pattern_42": [
        [160, 164, 167, 157, 800],
        [164, 168, 171, 161, 850],
        [168, 172, 175, 165, 900],
        [172, 176, 179, 169, 950],
        [176, 180, 183, 173, 1000], # First top
        [180, 176, 179, 173, 950],
        [176, 172, 175, 169, 900],
        [172, 168, 171, 165, 850], # Pullback bottom
        [168, 172, 175, 165, 800],
        [172, 176, 179, 169, 850],
        [176, 179, 182, 173, 900], # Second top
        [179, 175, 178, 172, 850],
        [175, 171, 174, 168, 800],
        [171, 167, 170, 164, 750],
        [167, 163, 166, 160, 700],
        [163, 159, 162, 156, 650],
        [159, 155, 158, 152, 600]
    ],

    "pattern_43": [
        [110, 113, 115, 108, 1350],
        [113, 116, 118, 111, 1450],
        [116, 119, 121, 114, 1550],
        [119, 122, 124, 117, 1650],
        [122, 125, 127, 120, 1750], # First top
        [125, 122, 124, 120, 1650],
        [122, 119, 121, 117, 1550],
        [119, 116, 118, 114, 1450], # Pullback bottom
        [116, 119, 121, 114, 1350],
        [119, 122, 124, 117, 1450],
        [122, 124, 126, 119, 1550], # Second top
        [124, 121, 123, 119, 1450],
        [121, 118, 120, 116, 1350],
        [118, 115, 117, 113, 1250],
        [115, 112, 114, 110, 1150],
        [112, 109, 111, 107, 1050],
        [109, 106, 108, 104, 950]
    ],

    "pattern_44": [
        [25, 27, 29, 23, 4300],
        [27, 30, 32, 25, 4500],
        [30, 33, 35, 28, 4700],
        [33, 36, 38, 31, 4900],
        [36, 39, 41, 34, 5100], # First top
        [39, 36, 38, 34, 4900],
        [36, 33, 35, 31, 4700],
        [33, 30, 32, 28, 4500], # Pullback bottom
        [30, 33, 35, 28, 4300],
        [33, 36, 38, 31, 4500],
        [36, 38, 40, 33, 4700], # Second top
        [38, 35, 37, 33, 4500],
        [35, 32, 34, 30, 4300],
        [32, 29, 31, 27, 4100],
        [29, 26, 28, 24, 3900],
        [26, 23, 25, 21, 3700],
        [23, 20, 22, 18, 3500]
    ],

    "pattern_45": [
        [270, 274, 277, 267, 350],
        [274, 278, 281, 271, 400],
        [278, 282, 285, 275, 450],
        [282, 286, 289, 279, 500],
        [286, 290, 293, 283, 550], # First top
        [290, 286, 289, 283, 500],
        [286, 282, 285, 279, 450],
        [282, 278, 281, 275, 400], # Pullback bottom
        [278, 282, 285, 275, 350],
        [282, 286, 289, 279, 400],
        [286, 289, 292, 283, 450], # Second top
        [289, 285, 288, 282, 400],
        [285, 281, 284, 278, 350],
        [281, 277, 280, 274, 300],
        [277, 273, 276, 270, 250],
        [273, 269, 272, 266, 200],
        [269, 265, 268, 262, 150]
    ],

    "pattern_46": [
        [35, 38, 40, 33, 3800],
        [38, 41, 43, 36, 4000],
        [41, 44, 46, 39, 4200],
        [44, 47, 49, 42, 4400],
        [47, 50, 52, 45, 4600], # First top
        [50, 47, 49, 45, 4400],
        [47, 44, 46, 42, 4200],
        [44, 41, 43, 39, 4000], # Pullback bottom
        [41, 44, 46, 39, 3800],
        [44, 47, 49, 42, 4000],
        [47, 49, 51, 44, 4200], # Second top
        [49, 46, 48, 44, 4000],
        [46, 43, 45, 41, 3800],
        [43, 40, 42, 38, 3600],
        [40, 37, 39, 35, 3400],
        [37, 34, 36, 32, 3200],
        [34, 31, 33, 29, 3000]
    ],

    "pattern_47": [
        [185, 189, 192, 182, 600],
        [189, 193, 196, 186, 650],
        [193, 197, 200, 190, 700],
        [197, 201, 204, 194, 750],
        [201, 205, 208, 198, 800], # First top
        [205, 201, 204, 198, 750],
        [201, 197, 200, 194, 700],
        [197, 193, 196, 190, 650], # Pullback bottom
        [193, 197, 200, 190, 600],
        [197, 201, 204, 194, 650],
        [201, 204, 207, 198, 700], # Second top
        [204, 200, 203, 197, 650],
        [200, 196, 199, 193, 600],
        [196, 192, 195, 189, 550],
        [192, 188, 191, 185, 500],
        [188, 184, 187, 181, 450],
        [184, 180, 183, 177, 400]
    ],

    "pattern_48": [
        [115, 118, 120, 113, 1250],
        [118, 121, 123, 116, 1350],
        [121, 124, 126, 119, 1450],
        [124, 127, 129, 122, 1550],
        [127, 130, 132, 125, 1650], # First top
        [130, 127, 129, 125, 1550],
        [127, 124, 126, 122, 1450],
        [124, 121, 123, 119, 1350], # Pullback bottom
        [121, 124, 126, 119, 1250],
        [124, 127, 129, 122, 1350],
        [127, 129, 131, 124, 1450], # Second top
        [129, 126, 128, 124, 1350],
        [126, 123, 125, 121, 1250],
        [123, 120, 122, 118, 1150],
        [120, 117, 119, 115, 1050],
        [117, 114, 116, 112, 950],
        [114, 111, 113, 109, 850]
    ],

    "pattern_49": [
        [65, 68, 70, 63, 2300],
        [68, 71, 73, 66, 2500],
        [71, 74, 76, 69, 2700],
        [74, 77, 79, 72, 2900],
        [77, 80, 82, 75, 3100], # First top
        [80, 77, 79, 75, 2900],
        [77, 74, 76, 72, 2700],
        [74, 71, 73, 69, 2500], # Pullback bottom
        [71, 74, 76, 69, 2300],
        [74, 77, 79, 72, 2500],
        [77, 79, 81, 74, 2700], # Second top
        [79, 76, 78, 74, 2500],
        [76, 73, 75, 71, 2300],
        [73, 70, 72, 68, 2100],
        [70, 67, 69, 65, 1900],
        [67, 64, 66, 62, 1700],
        [64, 61, 63, 59, 1500]
    ],

    "pattern_50": [
        [290, 294, 297, 287, 300],
        [294, 298, 301, 291, 350],
        [298, 302, 305, 295, 400],
        [302, 306, 309, 299, 450],
        [306, 310, 313, 303, 500], # First top
        [310, 306, 309, 303, 450],
        [306, 302, 305, 299, 400],
        [302, 298, 301, 295, 350], # Pullback bottom
        [298, 302, 305, 295, 300],
        [302, 306, 309, 299, 350],
        [306, 309, 312, 303, 400], # Second top
        [309, 305, 308, 302, 350],
        [305, 301, 304, 298, 300],
        [301, 297, 300, 294, 250],
        [297, 293, 296, 290, 200],
        [293, 289, 292, 286, 150],
        [289, 285, 288, 282, 100]
    ]
}
        X = []
        y = []
        
        # Extract features from positive samples (double top patterns)
        for pattern_name, pattern_data in double_top_patterns.items():
            features = self.extract_features(pattern_data)
            if features:
                X.append(list(features.values()))
                y.append(1)  # Positive class
        
        # Generate and extract features from negative samples
        negative_samples = self.generate_negative_samples(len(double_top_patterns))
        for neg_pattern in negative_samples:
            features = self.extract_features(neg_pattern)
            if features:
                X.append(list(features.values()))
                y.append(0)  # Negative class
        
        return np.array(X), np.array(y)
    
    def train(self):
        """Train the double top classifier"""
        print("Preparing training data...")
        X, y = self.prepare_training_data()
        
        print(f"Training data shape: {X.shape}")
        print(f"Positive samples: {np.sum(y == 1)}, Negative samples: {np.sum(y == 0)}")
        
        # Split the data
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
        
        # Scale the features
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        
        # Train the model
        print("Training the model...")
        self.model.fit(X_train_scaled, y_train)
        
        # Evaluate the model
        train_score = self.model.score(X_train_scaled, y_train)
        test_score = self.model.score(X_test_scaled, y_test)
        
        print(f"Training accuracy: {train_score:.3f}")
        print(f"Test accuracy: {test_score:.3f}")
        
        # Make predictions with probability
        y_pred_proba = self.model.predict_proba(X_test_scaled)[:, 1]
        y_pred_hard = (y_pred_proba >= self.threshold).astype(int)
        
        print(f"\nClassification Report (with threshold {self.threshold}):")
        print(classification_report(y_test, y_pred_hard))
        
        print(f"\nConfusion Matrix:")
        print(confusion_matrix(y_test, y_pred_hard))
        
        # Feature importance
        feature_names = ['price_range', 'volatility', 'top_distance', 'top_similarity', 
                        'support_strength', 'volume_increase', 'trend_reversal', 
                        'm_shape_score', 'breakdown_strength', 'early_momentum', 'late_momentum']
        
        feature_importance = pd.DataFrame({
            'feature': feature_names,
            'importance': self.model.feature_importances_
        }).sort_values('importance', ascending=False)
        
        print(f"\nTop 5 Most Important Features:")
        print(feature_importance.head())
        
        self.is_fitted = True
        return self.model
    
    def predict(self, ohlc_data):
        """
        Predict if a pattern is a double top
        
        Args:
            ohlc_data (list): OHLC data points
            
        Returns:
            tuple: (prediction, probability) 
                    1 if double top pattern detected, 0 otherwise
                    and the confidence probability
        """
        if not self.is_fitted:
            raise ValueError("Model must be trained first. Call train() method.")
        
        features = self.extract_features(ohlc_data)
        if not features:
            return 0, 0.0
        
        X = np.array([list(features.values())])
        X_scaled = self.scaler.transform(X)
        
        # Get probability and apply hard threshold
        probability = self.model.predict_proba(X_scaled)[0, 1]
        prediction = 1 if probability >= self.threshold else 0
        
        return prediction, probability
    
    def save_model(self, filepath=None):
        """
        Save the trained model to a pickle file
        
        Args:
            filepath (str): Path to save the model. If None, creates a timestamped filename
            
        Returns:
            str: Path where the model was saved
        """
        if not self.is_fitted:
            raise ValueError("Model must be trained first. Call train() method.")
        
        if filepath is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filepath = f"double_top_classifier_{timestamp}.pkl"
        
        # Create directory if it doesn't exist
        os.makedirs(os.path.dirname(filepath) if os.path.dirname(filepath) else '.', exist_ok=True)
        
        try:
            with open(filepath, 'wb') as f:
                pickle.dump(self, f)
            print(f"Model saved successfully to: {filepath}")
            return filepath
        except Exception as e:
            print(f"Error saving model: {e}")
            return None
    
    @classmethod
    def load_model(cls, filepath):
        """
        Load a trained model from a pickle file
        
        Args:
            filepath (str): Path to the saved model file
            
        Returns:
            DoubleTopClassifier: Loaded classifier instance
        """
        try:
            with open(filepath, 'rb') as f:
                classifier = pickle.load(f)
            
            # Verify it's the right type
            if not isinstance(classifier, cls):
                raise ValueError("Loaded object is not a DoubleTopClassifier instance")
            
            print(f"Model loaded successfully from: {filepath}")
            print(f"Model threshold: {classifier.threshold}")
            print(f"Model trained: {'Yes' if classifier.is_fitted else 'No'}")
            
            return classifier
        except FileNotFoundError:
            print(f"Error: Model file not found at {filepath}")
            return None
        except Exception as e:
            print(f"Error loading model: {e}")
            return None
    
    def get_model_info(self):
        """
        Get information about the current model
        
        Returns:
            dict: Model information
        """
        info = {
            'is_fitted': self.is_fitted,
            'threshold': self.threshold,
            'model_type': 'RandomForestClassifier',
            'n_estimators': self.model.n_estimators if self.is_fitted else None,
            'scaler_fitted': hasattr(self.scaler, 'mean_') if hasattr(self, 'scaler') else False
        }
        
        if self.is_fitted:
            info['feature_names'] = ['price_range', 'volatility', 'top_distance', 'top_similarity', 
                                   'support_strength', 'volume_increase', 'trend_reversal', 
                                   'm_shape_score', 'breakdown_strength', 'early_momentum', 'late_momentum']
            info['n_features'] = len(info['feature_names'])
        
        return info
    
    def plot_pattern(self, ohlc_data, title="Price Pattern"):
        """Plot the OHLC pattern"""
        if not ohlc_data:
            return
            
        ohlc_array = np.array(ohlc_data)
        closes = ohlc_array[:, 3]
        
        plt.figure(figsize=(12, 6))
        plt.plot(closes, linewidth=2)
        plt.title(title)
        plt.xlabel('Time Period')
        plt.ylabel('Price')
        plt.grid(True, alpha=0.3)
        plt.show()

# Example usage and testing
if __name__ == "__main__":
    print("=== Training New Model ===")
    # Initialize the classifier
    classifier = DoubleTopClassifier(threshold=0.7)
    
    # Train the model
    model = classifier.train()
    
    # Save the trained model
    model_path = classifier.save_model("models/double_top_model.pkl")
    
    # Test with a sample pattern (should be detected as double top)
    test_pattern = [
        [90, 92, 93, 89, 1000], [92, 95, 96, 91, 1100],
        [95, 98, 99, 94, 1200], [98, 100, 101, 97, 1300],
        [100, 102, 103, 99, 1400], [102, 103, 104, 101, 1500],
        [103, 100, 101, 98, 1600], [100, 97, 98, 96, 1500],
        [97, 95, 96, 94, 1400], [95, 98, 99, 94, 1300],
        [98, 100, 101, 97, 1400], [100, 102, 103, 99, 1500],
        [102, 100, 101, 98, 1400], [100, 97, 98, 95, 1300],
        [97, 94, 95, 92, 1200], [94, 91, 92, 90, 1100],
        [91, 89, 90, 88, 1000], [89, 87, 88, 86, 900],
        [87, 85, 86, 84, 800]
    ]
    
    # Make prediction with current model
    prediction, probability = classifier.predict(test_pattern)
    print(f"\nTest Pattern Prediction (Current Model):")
    print(f"Double Top Detected: {'Yes' if prediction == 1 else 'No'}")
    print(f"Confidence: {probability:.3f}")
    
    # Display model info
    print(f"\nModel Information:")
    model_info = classifier.get_model_info()
    for key, value in model_info.items():
        print(f"  {key}: {value}")
    
    print(f"\n" + "="*50)
    print("=== Loading Saved Model ===")
    
    # Load the saved model
    if model_path:
        loaded_classifier = DoubleTopClassifier.load_model(model_path)
        
        if loaded_classifier:
            # Test the loaded model with the same pattern
            prediction_loaded, probability_loaded = loaded_classifier.predict(test_pattern)
            print(f"\nTest Pattern Prediction (Loaded Model):")
            print(f"Double Top Detected: {'Yes' if prediction_loaded == 1 else 'No'}")
            print(f"Confidence: {probability_loaded:.3f}")
            
            # Verify predictions match
            if prediction == prediction_loaded and abs(probability - probability_loaded) < 1e-6:
                print(f"✅ Model saved and loaded successfully! Predictions match.")
            else:
                print(f"⚠️  Warning: Predictions don't match between original and loaded model.")
    
    # Plot the test pattern
    classifier.plot_pattern(test_pattern, "Test Pattern - Double Top Check")
    
    print(f"\n" + "="*50)
    print("=== Usage Examples ===")
    print(f"""
# To save a trained model:
classifier.save_model('my_model.pkl')

# To load a saved model:
loaded_classifier = DoubleTopClassifier.load_model('my_model.pkl')

# To use the loaded model:
prediction, confidence = loaded_classifier.predict(your_ohlc_data)

# To get model information:
info = loaded_classifier.get_model_info()
""")
    
    print(f"Model training and saving completed successfully!")
    print(f"Use classifier.predict(ohlc_data) to classify new patterns")
    print(f"Returns (prediction, probability) where prediction is 1 for double top, 0 otherwise")